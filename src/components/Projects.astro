---
import GitHub from "./icons/GitHub.astro"
import NextJS from "./icons/NextJS.astro"
import Tailwind from "./icons/Tailwind.astro"
import Link from "./icons/Link.astro"
import LinkButton from "./LinkButton.astro"
import Kotlin from "./icons/Kotlin.astro"
import Android from "./icons/Android.astro"
import Flutter from "./icons/Flutter.astro"

const TAGS = {
  NEXT: {
    name: "Next.js",
    class: "bg-black text-white",
    icon: NextJS,
  },
  TAILWIND: {
    name: "Tailwind CSS",
    class: "bg-[#003159] text-white",
    icon: Tailwind,
  },
  KOTLIN: {
    name: "Kotlin",
    class: "bg-[#003159] text-white",
    icon: Kotlin
  },
  ANDROID: {
    name: "Android",
    class: "bg-[#003159] text-white",
    icon: Android,
  },
  FLUTTER: {
    name: "Flutter",
    class: "bg-[#003159] text-white",
    icon: Flutter
  }
}
const PROJECTS = [
  {
    title: "Cuentos y Fábulas 4 Kids!",
    description:
      "Está aplicación cuenta con una recopilación de cuentos clásicos y fábulas cortas que le gustara a los niños.",
    link: "https://play.google.com/store/apps/details?id=com.miguellugo.cuentosyfabulas&pcampaignid=web_share",
    image: "/projects/cuentosyfabulas.png",
    tags: [TAGS.KOTLIN, TAGS.ANDROID]
  },
  {
    title: "NarutoMVVM",
    description:
      "Lista de personajes de la serie animada Naruto. El proyecto obtiene una lista de datos desde un API a través de Retrofit, aplicando MVVM y Clean architecture, además se utilizaron corrutinas e inyección de dependencias con Dagger Hilt.",
    //link: "",
    github: "https://github.com/miguellugom97/NarutoMVVM",
    image: "/projects/narutomvvm.png",
    tags: [TAGS.KOTLIN, TAGS.ANDROID]
  },
  {
    title: "DragonBallCatalog",
    description:
      "Catalogo de los personajes de Dragon Ball hecho en Flutter aplicando Clean architecture.",
    //link: "https://svgl.vercel.app/",
    github: "https://github.com/miguellugom97/dragon_ball_catalog",
    image: "/projects/dragonballcatalog.png",
    tags: [TAGS.FLUTTER]
  },
  {
    title: "MVVMexercise",
    description:
      "Lista de citas para programadores. El proyecto obtiene una lista de citas de programadores a través de Retrofit, aplicando MVVM y Clean architecture, ademas se utilizaron corrutinas e inyección de dependencias con Dagger Hilt.",
    //link: "https://svgl.vercel.app/",
    github: "https://github.com/miguellugom97/MVVMexercise",
    image: "/projects/mvvmexercise.png",
    tags: [TAGS.KOTLIN, TAGS.ANDROID]
  },
  {
    title: "PruebaTecnica",
    description:
      "App de bienestar que contiene un flujo de navegación basico con Bottom Navigation y Navigation Components.",
    //link: "https://svgl.vercel.app/",
    github: "https://github.com/miguellugom97/PruebaTecnica",
    image: "/projects/pruebatecnica.png",
    tags: [TAGS.KOTLIN, TAGS.ANDROID]
  },
  {
    title: "NarutoApp",
    description:
      "App que consume un API creada con ktor, sobre personajes de Naruto. El proyecto obtiene una lista de datos desde un API a través de Retrofit, aplicando MVVM y Clean architecture, además se utilizaron corrutinas e inyección de dependencias con Dagger Hilt. La UI fue creada con Jetpack Compose.",
    //link: "https://svgl.vercel.app/",
    github: "https://github.com/miguellugom97/NarutoApp",
    image: "/projects/narutoapp.png",
    tags: [TAGS.KOTLIN, TAGS.ANDROID]
  }
]
---

<div class="flex flex-col gap-y-16">
  {
    PROJECTS.map(({ image, title, description, tags, link, github }) => (
    <article class="flex flex-col space-x-0 space-y-8 group md:flex-row md:space-x-8 md:space-y-0">
  <div class="w-full md:w-1/2">
    <div class="relative flex flex-col items-center col-span-6 row-span-5 gap-8 transition duration-500 ease-in-out transform shadow-xl overflow-clip rounded-xl sm:rounded-xl md:group-hover:-translate-y-1 md:group-hover:shadow-2xl lg:border lg:border-gray-800 lg:hover:border-gray-700 lg:hover:bg-gray-800/50">
      <img alt="Recién llegado vs 5 años en Nueva Zelanda" class="object-cover object-top w-full h-56 transition duration-500 sm:h-full md:scale-110 md:group-hover:scale-105" loading="lazy" src={image} />
    </div>
  </div>

  <div class="w-full md:w-1/2 md:max-w-lg">
    <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
      {title}
    </h3>
    <div class="flex flex-wrap mt-2">
      <ul class="flex flex-row mb-2 gap-x-2">
          {tags.map((tag) => (
            <li>
              <span
                class={`flex gap-x-2 rounded-full text-xs ${tag.class} py-1 px-2 `}
              >
                <tag.icon class="size-4" />
                {tag.name}
              </span>
            </li>
          ))}
        </ul>

      <div class="mt-2 text-gray-700 dark:text-gray-400">{description}</div>
      <footer class="flex items-end justify-start mt-4 gap-x-4">
          {github && (
            <LinkButton href={github}>
              <GitHub class="size-6" />
              Code
              
            </LinkButton>
          )}
          {link && (
            <LinkButton href={link}>
              <Link class="size-4" />
              Google Play
            </LinkButton>
          )}
        </footer>
    </div>
  </div>
</article>
    ))
  }
</div>